/*
 *   Created by Adam Sher on 1/5/19
 *   This class will be used to control the robot during the teleop period.
 *   It will drive in tank mode. It will use a waypoint/beacon system to return
 *   to a specified position.
 */


package org.firstinspires.ftc.teamcode.OpModes.Teleop;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.Other.Backend.MadHardware;
import org.firstinspires.ftc.teamcode.Other.WaypointSystemAvoid;
import org.firstinspires.ftc.teamcode.Other.WaypointSystemLinear;

import java.lang.Override;

@Disabled
@TeleOp(name = "TEST: Teleop: Waypoints", group = "TeleOp")   // How opMode is displayed on phones
public class Teleop_Waypoints extends OpMode {


    // Initializing the hardware objects (motors).
    MadHardware mhw = new MadHardware();
    WaypointSystemAvoid waypointSysA = new WaypointSystemAvoid();
    WaypointSystemLinear waypointSysL = new WaypointSystemLinear();
    ElapsedTime runtime = new ElapsedTime();

    public boolean avoid = false;

    public double oldLeftPower = 0;
    public double oldRightPower = 0;
    public boolean goingToWaypoint = false;

    // This method is run once when the "INIT" button is pressed on the phone.
    @Override
    public void init() {
        // addData calls are used for debugging.
        telemetry.addData("Status", "Initializing...");

        // Initialize motor controller (effectively calling MadHardware.init())
        mhw.init(hardwareMap);

        waypointSysL.initialize(hardwareMap);

        mhw.releaserServo.setPower(0.0f);
        mhw.yeeterServo.setPower(0.0f);
        mhw.gateServo.setPower(0.0f);

        telemetry.addData("Status", "Initialized, awaiting autonomous start.");
    }


    // This method is run repeatedly after "INIT" being pressed
    // but before the play button is pressed on the phone.
    @Override
    public void init_loop() {
    }


    // This method is run once when the play button is pressed on the phone.
    @Override
    public void start() {
        telemetry.addData("Status", "Teleop start successful.");

        waypointSysL.opModeOn();
//          dont delete the program breaks no idea why
//        int x = 0;
//        int y = (x==0 ? 0 : 1);
//        y = 0 if x is (2 if x is 3 else 3) else 1;

    }


    // This method is run repeatedly after the play button is pressed on the phone.
    @Override
    public void loop() {

        waypointSysL.opModeOn();
        telemetry.addData("Status", "Teleop started, driving.");


        // These variables describe the power to each motor.
        double leftPower;
        double rightPower;
        double lifterPower;
        double harvesterPower;



        // Assign the power of each motor based on the joystick position.
        // Multiply each by -1 to flip orientation of sticks.
        // Driver: gamepad1. Gunner: gamepad2
        leftPower = gamepad1.left_stick_y;
        rightPower = gamepad1.right_stick_y;
        lifterPower = gamepad2.right_stick_y;
        harvesterPower = gamepad2.left_stick_y;

        if(leftPower >= 0.5)
            leftPower = 1;
        else if(leftPower <= -0.5)
            leftPower = -0.5;
        else
            leftPower = 0;

        if(rightPower >= 0.5)
            rightPower = 1;
        else if(rightPower <= -0.5)
            rightPower = -1;
        else
            rightPower = 0;


        if(!goingToWaypoint)
        {
            if (gamepad1.right_trigger < 0.1) // Normal driving mode
            {
                mhw.leftDrive.setPower(0.33 * leftPower);
                mhw.rightDrive.setPower(0.33 * rightPower);
            }
            else // TURBO mode activate!
            {
                mhw.leftDrive.setPower(1.00 * leftPower);
                mhw.rightDrive.setPower(1.00 * rightPower);
            }
            if (gamepad2.right_trigger >= 0.1) // Normal controlling mode
            {
                mhw.lifterMotor.setPower(0.20 * lifterPower);
                mhw.harvesterMotor.setPower(0.33 * harvesterPower);
            }
            else if (gamepad2.right_bumper)
            {
                mhw.lifterMotor.setPower(1.00 * lifterPower);
                mhw.harvesterMotor.setPower(0.5 * harvesterPower);
            }
            else // Hanging mode (low sensitivity) for lifter, turbo mode for harvester.
            {
                mhw.lifterMotor.setPower(1.00 * lifterPower);

                if (gamepad2.b) // This will be used for flicking the block onto the lifter at the very top.
                    mhw.harvesterMotor.setPower(0.17 * harvesterPower);
                else
                    mhw.harvesterMotor.setPower(0.15 * harvesterPower);
            }
        }


/*
        if(mhw.oxygenDepletionSensor.getLightDetected() < 0.2 || mhw.oxygenDepletionSensor.getLightDetected() > 0.8)
            mhw.lifterMotor.setPower(0.0f);

        telemetry.addData("Gyro angle: ",  mhw.gyro.getRotationFraction());
        telemetry.addData("Color sensor value: ", mhw.colorSensor.argb());
        telemetry.addData("Distance sensor value: ", mhw.oxygenDepletionSensor.getLightDetected());
*/

        if(gamepad2.left_trigger >= 0.1)
            mhw.releaserServo.setPower(0.1f);
        else if (gamepad2.left_bumper)
            mhw.releaserServo.setPower(-0.1f);
        else
            mhw.releaserServo.setPower(0.0f);

        if(gamepad2.dpad_up)
            mhw.yeeterServo.setPower(1.0f);
        else if (gamepad2.dpad_down)
            mhw.yeeterServo.setPower(-1.0f);
        else
            mhw.yeeterServo.setPower(0.0f);

        if(gamepad1.left_trigger >= 0.1)
            mhw.gateServo.setPower(0.3f);
        else if (gamepad1.left_bumper)
            mhw.gateServo.setPower(-0.3f);
        else
            mhw.gateServo.setPower(0.0f);

        if(avoid)
        {
            waypointSysA.updateMovements(leftPower, rightPower, 0f, 0f, 0f, oldLeftPower, oldRightPower);
            if (gamepad1.dpad_down)
                waypointSysA.addWaypoint();
            if (gamepad1.dpad_up) {
                goingToWaypoint = true;
                telemetry.addData("nM = ", waypointSysA.goToWaypoint());
                goingToWaypoint = false;
            }
            //waypointSysA.updateMovements(true, leftPower, rightPower, mhw.gyro.getRotationFraction(), mhw.leftDrive.getCurrentPosition(), mhw.rightDrive.getCurrentPosition(), oldLeftPower, oldRightPower);
        }
        else
        {
            if(gamepad1.dpad_down)
            {
                waypointSysL.addWaypoint();
                mhw.gyro.resetZAxisIntegrator();
            }
            if(gamepad1.dpad_up)
            {
                goingToWaypoint = true;
                waypointSysL.goToWaypoint();
                goingToWaypoint = false;
            }
            waypointSysL.updatePosition(mhw.gyro.rawZ(), mhw.leftDrive.getCurrentPosition(), mhw.rightDrive.getCurrentPosition());
            mhw.leftDrive.setMode(DcMotor.RunMode.RESET_ENCODERS);
            mhw.leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            mhw.rightDrive.setMode(DcMotor.RunMode.RESET_ENCODERS);
            mhw.rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }

        oldLeftPower = leftPower;
        oldRightPower = rightPower;
    }





    // This method is run once when the stop button is pressed on the phone.
    @Override
    public void stop()
    {
        waypointSysL.opModeOff();
        telemetry.addData("Status", "Teleop stop successful.");
    }

} // End of class